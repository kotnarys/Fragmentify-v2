{"version":3,"file":"index.cjs.js","sources":["../src/utils/misc.ts","../src/utils/deepLinks.ts","../src/constants/values.ts","../src/constants/events.ts","../src/providers/eip155.ts","../src/providers/solana.ts","../src/providers/cosmos.ts","../src/providers/cardano.ts","../src/UniversalProvider.ts","../src/index.ts"],"sourcesContent":["import { Namespace } from \"../types\";\n\nexport function getRpcUrl(chainId: string, rpc: Namespace): string | undefined {\n  let rpcUrl: string | undefined;\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[getChainId(chainId)];\n  }\n  return rpcUrl;\n}\n\nexport function getChainId(chain: string): number {\n  return Number(chain.split(\":\")[1]);\n}\n\nexport function validateChainApproval(chain: string, chains: string[]): void {\n  if (!chains.includes(chain)) {\n    throw new Error(\n      `Chain '${chain}' not approved. Please use one of the following: ${chains.toString()}`,\n    );\n  }\n}\n\nexport function getChainsFromApprovedSession(accounts: string[]): string[] {\n  return accounts.map((address) => `${address.split(\":\")[0]}:${address.split(\":\")[1]}`);\n}\n","import { SignClient } from \"@walletconnect/sign-client\";\nimport { SignClientTypes } from \"@walletconnect/types\";\nimport { RequestParams } from \"../types\";\n\nexport const handleDeepLinks = (client: InstanceType<typeof SignClient>, params: RequestParams) => {\n  const handleSessionRequestSent = (\n    payload: SignClientTypes.EventArguments[\"session_request_sent\"],\n  ) => {\n    // only handle the request if it matches the request and topic\n    if (payload.request !== params.request || payload.topic !== params.topic) return;\n    client.events.removeListener(\"session_request_sent\", handleSessionRequestSent);\n    deeplinkRedirect();\n  };\n  client.on(\"session_request_sent\", handleSessionRequestSent);\n};\n\nexport function deeplinkRedirect() {\n  if (typeof window !== \"undefined\") {\n    try {\n      const item = window.localStorage.getItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      if (item) {\n        const json = JSON.parse(item);\n        window.open(json.href, \"_self\", \"noreferrer noopener\");\n      }\n    } catch (err) {\n      // Silent error, just log in console\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n","export const LOGGER = \"error\";\n\nexport const RELAY_URL = \"wss://relay.walletconnect.com\";\n\nexport const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"universal_provider\";\n\nexport const STORAGE = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\n","export const PROVIDER_EVENTS = {\n  DEFAULT_CHAIN_CHANGED: \"default_chain_changed\",\n};\n","import Client from \"@walletconnect/sign-client\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\n\nimport {\n  IProvider,\n  RpcProvidersMap,\n  SubProviderOpts,\n  RequestParams,\n  SessionNamespace,\n} from \"../types\";\n\nimport { getChainId, getRpcUrl, handleDeepLinks, validateChainApproval } from \"../utils\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\n\nclass Eip155Provider implements IProvider {\n  public name = \"eip155\";\n  public client: Client;\n  // the active chainId on the dapp\n  public chainId: number;\n  public namespace: SessionNamespace;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.client = opts.client;\n    this.events = opts.events;\n    this.httpProviders = this.createHttpProviders();\n    this.chainId = parseInt(this.getDefaultChain());\n  }\n\n  public async request<T = unknown>(args: RequestParams): Promise<T> {\n    switch (args.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts() as any;\n      case \"eth_accounts\":\n        return this.getAccounts() as any;\n      case \"wallet_switchEthereumChain\": {\n        this.handleSwitchChain(args.request.params ? args.request.params[0]?.chainId : \"0x0\");\n        return null as any;\n      }\n      case \"eth_chainId\":\n        return parseInt(this.getDefaultChain()) as any;\n      default:\n        break;\n    }\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    const parsedChain = parseInt(chainId);\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(parsedChain, rpc);\n    }\n    this.chainId = parsedChain;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId.toString();\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private createHttpProvider(\n    chainId: number,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n\n  private setHttpProvider(chainId: number, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(getChainId(chain));\n    });\n    return http;\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private handleSwitchChain(newChainId: string) {\n    const chainId = parseInt(newChainId, 16);\n    const caipChainId = `${this.name}:${chainId}`;\n    validateChainApproval(caipChainId, this.namespace.chains);\n    this.setDefaultChain(`${chainId}`);\n  }\n}\n\nexport default Eip155Provider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl, handleDeepLinks } from \"../utils\";\n\nclass SolanaProvider implements IProvider {\n  public name = \"solana\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default SolanaProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl, handleDeepLinks } from \"../utils\";\n\nclass CosmosProvider implements IProvider {\n  public name = \"cosmos\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default CosmosProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl, handleDeepLinks } from \"../utils\";\n\nclass CardanoProvider implements IProvider {\n  public name = \"cip34\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ------------- PRIVATE -------------- /\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return (\n      accounts\n        // get the accounts from the active chain\n        .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n        // remove namespace & chainId from the string\n        .map((account) => account.split(\":\")[2]) || []\n    );\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default CardanoProvider;\n","import pino from \"pino\";\nimport SignClient from \"@walletconnect/sign-client\";\nimport { ProviderAccounts } from \"eip1193-provider\";\nimport { SessionTypes } from \"@walletconnect/types\";\nimport { getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions, Logger } from \"@walletconnect/logger\";\nimport Eip155Provider from \"./providers/eip155\";\nimport SolanaProvider from \"./providers/solana\";\nimport CosmosProvider from \"./providers/cosmos\";\nimport CardanoProvider from \"./providers/cardano\";\nimport { getChainsFromApprovedSession } from \"./utils\";\nimport {\n  IUniversalProvider,\n  IProvider,\n  RpcProviderMap,\n  ConnectParams,\n  RequestArguments,\n  UniversalProviderOpts,\n  NamespaceConfig,\n  PairingsCleanupOpts,\n} from \"./types\";\n\nimport { RELAY_URL, LOGGER, STORAGE, PROVIDER_EVENTS } from \"./constants\";\nimport EventEmitter from \"events\";\n\nexport class UniversalProvider implements IUniversalProvider {\n  public client!: SignClient;\n  public namespaces!: NamespaceConfig;\n  public optionalNamespaces?: NamespaceConfig;\n  public sessionProperties?: Record<string, string>;\n  public events: EventEmitter = new EventEmitter();\n  public rpcProviders: RpcProviderMap = {};\n  public session?: SessionTypes.Struct;\n  public providerOpts: UniversalProviderOpts;\n  public logger: Logger;\n  public uri: string | undefined;\n\n  static async init(opts: UniversalProviderOpts) {\n    const provider = new UniversalProvider(opts);\n    await provider.initialize();\n    return provider;\n  }\n\n  constructor(opts: UniversalProviderOpts) {\n    this.providerOpts = opts;\n    this.logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || LOGGER }));\n  }\n\n  public async request<T = unknown>(\n    args: RequestArguments,\n    chain?: string | undefined,\n  ): Promise<T> {\n    const [namespace, chainId] = this.validateChain(chain);\n\n    if (!this.session) {\n      throw new Error(\"Please call connect() before request()\");\n    }\n\n    return await this.getProvider(namespace).request({\n      request: {\n        ...args,\n      },\n      chainId: `${namespace}:${chainId}`,\n      topic: this.session.topic,\n    });\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: any) => void,\n    chain?: string | undefined,\n  ): void {\n    this.request(args, chain)\n      .then((response) => callback(null, response))\n      .catch((error) => callback(error, undefined));\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    if (!this.session) {\n      await this.connect({\n        namespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n    }\n    const accounts = await this.requestAccounts();\n    return accounts as ProviderAccounts;\n  }\n\n  public async disconnect(): Promise<void> {\n    if (!this.session) {\n      throw new Error(\"Please call connect() before enable()\");\n    }\n    await this.client.disconnect({\n      topic: this.session?.topic,\n      reason: getSdkError(\"USER_DISCONNECTED\"),\n    });\n    await this.cleanup();\n  }\n\n  public async connect(opts: ConnectParams): Promise<SessionTypes.Struct | undefined> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    this.setNamespaces(opts);\n    await this.cleanupPendingPairings();\n    if (opts.skipPairing) return;\n\n    return await this.pair(opts.pairingTopic);\n  }\n\n  public on(event: any, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  public async pair(pairingTopic: string | undefined): Promise<SessionTypes.Struct> {\n    const { uri, approval } = await this.client.connect({\n      pairingTopic,\n      requiredNamespaces: this.namespaces,\n      optionalNamespaces: this.optionalNamespaces,\n      sessionProperties: this.sessionProperties,\n    });\n\n    if (uri) {\n      this.uri = uri;\n      this.events.emit(\"display_uri\", uri);\n    }\n    this.session = await approval();\n    this.createProviders();\n    this.onConnect();\n    return this.session;\n  }\n\n  public setDefaultChain(chain: string, rpcUrl?: string | undefined) {\n    try {\n      const [namespace, chainId] = this.validateChain(chain);\n      this.getProvider(namespace).setDefaultChain(chainId, rpcUrl);\n    } catch (error) {\n      // ignore the error if the fx is used prematurely before namespaces are set\n      if (!/Please call connect/.test((error as Error).message)) throw error;\n    }\n  }\n\n  public async cleanupPendingPairings(opts: PairingsCleanupOpts = {}): Promise<void> {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const inactivePairings = this.client.pairing.getAll();\n\n    if (!isValidArray(inactivePairings)) return;\n\n    for (const pairing of inactivePairings) {\n      if (opts.deletePairings) {\n        this.client.core.expirer.set(pairing.topic, 0);\n      } else {\n        await this.client.core.relayer.subscriber.unsubscribe(pairing.topic);\n      }\n    }\n\n    this.logger.info(`Inactive pairings cleared: ${inactivePairings.length}`);\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async checkStorage() {\n    this.namespaces = (await this.getFromStore(\"namespaces\")) || {};\n    this.optionalNamespaces = (await this.getFromStore(\"optionalNamespaces\")) || {};\n    if (this.client.session.length) {\n      const lastKeyIndex = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[lastKeyIndex]);\n      this.createProviders();\n    }\n  }\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    await this.createClient();\n    await this.checkStorage();\n    this.registerEventListeners();\n  }\n\n  private async createClient() {\n    this.client =\n      this.providerOpts.client ||\n      (await SignClient.init({\n        logger: this.providerOpts.logger || LOGGER,\n        relayUrl: this.providerOpts.relayUrl || RELAY_URL,\n        projectId: this.providerOpts.projectId,\n        metadata: this.providerOpts.metadata, // fetch metadata automatically if not provided?\n        storageOptions: this.providerOpts.storageOptions,\n        name: this.providerOpts.name,\n      }));\n\n    this.logger.trace(`SignClient Initialized`);\n  }\n\n  private createProviders(): void {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    Object.keys(this.namespaces).forEach((namespace) => {\n      const accounts = this.session?.namespaces[namespace].accounts || [];\n      const approvedChains = getChainsFromApprovedSession(accounts);\n      const combinedNamespace = {\n        ...Object.assign(this.namespaces[namespace], this.optionalNamespaces?.[namespace] ?? {}),\n        accounts,\n        chains: approvedChains,\n      };\n      switch (namespace) {\n        case \"eip155\":\n          this.rpcProviders[namespace] = new Eip155Provider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[namespace] = new SolanaProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[namespace] = new CosmosProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"polkadot\":\n          //TODO:\n          break;\n        case \"cip34\":\n          this.rpcProviders[namespace] = new CardanoProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n      }\n    });\n  }\n\n  private registerEventListeners(): void {\n    if (typeof this.client === \"undefined\") {\n      throw new Error(\"Sign Client is not initialized\");\n    }\n\n    this.client.on(\"session_ping\", (args) => {\n      this.events.emit(\"session_ping\", args);\n    });\n\n    this.client.on(\"session_event\", (args) => {\n      const { params } = args;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.events.emit(\"accountsChanged\", event.data);\n      } else if (event.name === \"chainChanged\") {\n        this.onChainChanged(params.chainId);\n      } else {\n        this.events.emit(event.name, event.data);\n      }\n\n      this.events.emit(\"session_event\", args);\n    });\n\n    this.client.on(\"session_update\", ({ topic, params }) => {\n      const { namespaces } = params;\n      const _session = this.client?.session.get(topic);\n      this.session = { ..._session, namespaces } as SessionTypes.Struct;\n      this.onSessionUpdate();\n      this.events.emit(\"session_update\", { topic, params });\n    });\n\n    this.client.on(\"session_delete\", async (payload) => {\n      await this.cleanup();\n      this.events.emit(\"session_delete\", payload);\n      this.events.emit(\"disconnect\", {\n        ...getSdkError(\"USER_DISCONNECTED\"),\n        data: payload.topic,\n      });\n    });\n\n    this.on(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, (caip2ChainId: string) => {\n      this.onChainChanged(caip2ChainId, true);\n    });\n  }\n\n  private getProvider(namespace: string): IProvider {\n    if (!this.rpcProviders[namespace]) {\n      throw new Error(`Provider not found: ${namespace}`);\n    }\n    return this.rpcProviders[namespace];\n  }\n\n  private onSessionUpdate(): void {\n    Object.keys(this.rpcProviders).forEach((namespace: string) => {\n      this.getProvider(namespace).updateNamespace(\n        this.session?.namespaces[namespace] as SessionTypes.BaseNamespace,\n      );\n    });\n  }\n\n  private setNamespaces(params: ConnectParams): void {\n    const { namespaces, optionalNamespaces, sessionProperties } = params;\n    if (!namespaces || !Object.keys(namespaces).length) {\n      throw new Error(\"Namespaces must be not empty\");\n    }\n    this.namespaces = namespaces;\n    this.optionalNamespaces = optionalNamespaces;\n    this.sessionProperties = sessionProperties;\n    this.persist(\"namespaces\", namespaces);\n    this.persist(\"optionalNamespaces\", optionalNamespaces);\n  }\n\n  private validateChain(chain?: string): [string, string] {\n    const [namespace, chainId] = chain?.split(\":\") || [\"\", \"\"];\n    // validate namespace\n    if (namespace) {\n      if (!Object.keys(this.namespaces).includes(namespace)) {\n        throw new Error(\n          `Namespace '${namespace}' is not configured. Please call connect() first with namespace config.`,\n        );\n      }\n    }\n    if (namespace && chainId) {\n      return [namespace, chainId];\n    }\n    const defaultNamespace = Object.keys(this.namespaces)[0];\n    const defaultChain = this.rpcProviders[defaultNamespace].getDefaultChain();\n    return [defaultNamespace, defaultChain];\n  }\n\n  private async requestAccounts(): Promise<string[]> {\n    const [namespace] = this.validateChain();\n    return await this.getProvider(namespace).requestAccounts();\n  }\n\n  private onChainChanged(caip2Chain: string, internal = false): void {\n    const [namespace, chainId] = this.validateChain(caip2Chain);\n\n    if (!internal) {\n      this.getProvider(namespace).setDefaultChain(chainId);\n    }\n\n    this.namespaces[namespace].defaultChain = chainId;\n    this.persist(\"namespaces\", this.namespaces);\n    this.events.emit(\"chainChanged\", chainId);\n  }\n\n  private onConnect() {\n    this.events.emit(\"connect\", { session: this.session });\n  }\n\n  private async cleanup() {\n    this.session = undefined;\n    await this.cleanupPendingPairings({ deletePairings: true });\n  }\n\n  private persist(key: string, data: unknown) {\n    this.client.core.storage.setItem(`${STORAGE}/${key}`, data);\n  }\n\n  private async getFromStore(key: string) {\n    return await this.client.core.storage.getItem(`${STORAGE}/${key}`);\n  }\n}\nexport default UniversalProvider;\n","import { UniversalProvider as Provider } from \"./UniversalProvider\";\nexport * from \"./types\";\nexport const UniversalProvider = Provider;\nexport default Provider;\n"],"names":["chainId","rpc","rpcUrl","chain","chains","accounts","address","client","params","handleSessionRequestSent","payload","item","json","err","Eip155Provider","opts","args","_a","handleDeepLinks","namespace","parsedChain","getRpcUrl","PROVIDER_EVENTS","JsonRpcProvider","HttpConnection","http","getChainId","account","newChainId","caipChainId","validateChainApproval","SolanaProvider","CosmosProvider","CardanoProvider","UniversalProvider","EventEmitter","pino","getDefaultLoggerOptions","LOGGER","provider","__spreadValues","callback","response","error","getSdkError","event","listener","pairingTopic","uri","approval","inactivePairings","isValidArray","pairing","lastKeyIndex","SignClient","RELAY_URL","_b","_c","approvedChains","getChainsFromApprovedSession","combinedNamespace","__spreadProps","topic","namespaces","_session","caip2ChainId","optionalNamespaces","sessionProperties","defaultNamespace","defaultChain","caip2Chain","internal","key","data","STORAGE","Provider"],"mappings":"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"}