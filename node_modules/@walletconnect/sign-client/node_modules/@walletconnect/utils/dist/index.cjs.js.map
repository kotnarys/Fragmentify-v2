{"version":3,"file":"index.cjs.js","sources":["../src/caip.ts","../src/cacao.ts","../src/crypto.ts","../src/misc.ts","../src/relay.ts","../src/uri.ts","../src/namespaces.ts","../src/errors.ts","../src/validators.ts"],"sourcesContent":["import { SessionTypes, ProposalTypes } from \"@walletconnect/types\";\n\ninterface ChainIdParams {\n  namespace: string;\n  reference: string;\n}\n\ninterface AccountIdParams extends ChainIdParams {\n  address: string;\n}\n\nconst CAIP_DELIMITER = \":\";\n\nexport function parseChainId(chain: string): ChainIdParams {\n  const [namespace, reference] = chain.split(CAIP_DELIMITER);\n  return { namespace, reference };\n}\n\nexport function formatChainId(params: ChainIdParams): string {\n  const { namespace, reference } = params;\n  return [namespace, reference].join(CAIP_DELIMITER);\n}\n\nexport function parseAccountId(account: string): AccountIdParams {\n  const [namespace, reference, address] = account.split(CAIP_DELIMITER);\n  return { namespace, reference, address };\n}\n\nexport function formatAccountId(params: AccountIdParams): string {\n  const { namespace, reference, address } = params;\n  return [namespace, reference, address].join(CAIP_DELIMITER);\n}\n\nexport function getUniqueValues(array: string[], parser: (str: string) => string): string[] {\n  const unique: string[] = [];\n  array.forEach((str) => {\n    const value = parser(str);\n    if (!unique.includes(value)) unique.push(value);\n  });\n  return unique;\n}\n\nexport function getAddressFromAccount(account: string) {\n  const { address } = parseAccountId(account);\n  return address;\n}\n\nexport function getChainFromAccount(account: string) {\n  const { namespace, reference } = parseAccountId(account);\n  const chain = formatChainId({ namespace, reference });\n  return chain;\n}\n\nexport function formatAccountWithChain(address: string, chain: string) {\n  const { namespace, reference } = parseChainId(chain);\n  const account = formatAccountId({ namespace, reference, address });\n  return account;\n}\n\nexport function getAddressesFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getAddressFromAccount);\n}\n\nexport function getChainsFromAccounts(accounts: string[]) {\n  return getUniqueValues(accounts, getChainFromAccount);\n}\n\nexport function getAccountsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const accounts: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    accounts.push(...ns.accounts);\n  });\n  return accounts;\n}\n\nexport function getChainsFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(namespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = namespaces[key];\n    chains.push(...getChainsFromAccounts(ns.accounts));\n  });\n  return chains;\n}\n\nexport function getChainsFromRequiredNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  keys: string[] = [],\n): string[] {\n  const chains: string[] = [];\n  Object.keys(requiredNamespaces).forEach((key) => {\n    if (keys.length && !keys.includes(key)) return;\n    const ns = requiredNamespaces[key];\n    chains.push(...getChainsFromNamespace(key, ns));\n  });\n  return chains;\n}\n\nexport function getChainsFromNamespace(\n  namespace: string,\n  namespaceProps: ProposalTypes.BaseRequiredNamespace,\n) {\n  // check if chainId is provided in the key as `eip155:1` or in the namespace as chains[]\n  return namespace.includes(\":\") ? [namespace] : namespaceProps.chains || [];\n}\n","export interface CacaoPayload {\n  iss: string;\n  domain: string;\n  aud: string;\n  version: string;\n  nonce: string;\n  iat: string;\n  nbf?: string;\n  exp?: string;\n  statement?: string;\n  requestId?: string;\n  resources?: string[];\n}\n\nexport interface CacaoHeader {\n  t: \"eip4361\";\n}\n\nexport interface CacaoSignature {\n  t: \"eip191\" | \"eip1271\";\n  s: string;\n  m?: string;\n}\n\nexport interface Cacao {\n  h: CacaoHeader;\n  p: CacaoPayload;\n  s: CacaoSignature;\n}\n\nexport const getDidAddressSegments = (iss: string) => {\n  return iss?.split(\":\");\n};\n\nexport const getDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[3];\n  }\n  return undefined;\n};\n\nexport const getNamespacedDidChainId = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments[2] + \":\" + segments[3];\n  }\n  return undefined;\n};\n\nexport const getDidAddress = (iss: string) => {\n  const segments = iss && getDidAddressSegments(iss);\n  if (segments) {\n    return segments.pop();\n  }\n  return undefined;\n};\n\nexport const formatMessage = (cacao: CacaoPayload, iss: string) => {\n  const header = `${cacao.domain} wants you to sign in with your Ethereum account:`;\n  const walletAddress = getDidAddress(iss);\n  const statement = cacao.statement;\n  const uri = `URI: ${cacao.aud}`;\n  const version = `Version: ${cacao.version}`;\n  const chainId = `Chain ID: ${getDidChainId(iss)}`;\n  const nonce = `Nonce: ${cacao.nonce}`;\n  const issuedAt = `Issued At: ${cacao.iat}`;\n  const resources =\n    cacao.resources && cacao.resources.length > 0\n      ? `Resources:\\n${cacao.resources.map((resource) => `- ${resource}`).join(\"\\n\")}`\n      : undefined;\n\n  const message = [\n    header,\n    walletAddress,\n    ``,\n    statement,\n    ``,\n    uri,\n    version,\n    chainId,\n    nonce,\n    issuedAt,\n    resources,\n  ]\n    .filter((val) => val !== undefined && val !== null) // remove unnecessary empty lines\n    .join(\"\\n\");\n\n  return message;\n};\n","import { ChaCha20Poly1305 } from \"@stablelib/chacha20poly1305\";\nimport { HKDF } from \"@stablelib/hkdf\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { hash, SHA256 } from \"@stablelib/sha256\";\nimport * as x25519 from \"@stablelib/x25519\";\nimport { CryptoTypes } from \"@walletconnect/types\";\nimport { concat, fromString, toString } from \"uint8arrays\";\n\nexport const BASE10 = \"base10\";\nexport const BASE16 = \"base16\";\nexport const BASE64 = \"base64pad\";\nexport const UTF8 = \"utf8\";\n\nexport const TYPE_0 = 0;\nexport const TYPE_1 = 1;\n\nconst ZERO_INDEX = 0;\nconst TYPE_LENGTH = 1;\nconst IV_LENGTH = 12;\nconst KEY_LENGTH = 32;\n\nexport function generateKeyPair(): CryptoTypes.KeyPair {\n  const keyPair = x25519.generateKeyPair();\n  return {\n    privateKey: toString(keyPair.secretKey, BASE16),\n    publicKey: toString(keyPair.publicKey, BASE16),\n  };\n}\n\nexport function generateRandomBytes32(): string {\n  const random = randomBytes(KEY_LENGTH);\n  return toString(random, BASE16);\n}\n\nexport function deriveSymKey(privateKeyA: string, publicKeyB: string): string {\n  const sharedKey = x25519.sharedKey(\n    fromString(privateKeyA, BASE16),\n    fromString(publicKeyB, BASE16),\n  );\n  const hkdf = new HKDF(SHA256, sharedKey);\n  const symKey = hkdf.expand(KEY_LENGTH);\n  return toString(symKey, BASE16);\n}\n\nexport function hashKey(key: string): string {\n  const result = hash(fromString(key, BASE16));\n  return toString(result, BASE16);\n}\n\nexport function hashMessage(message: string): string {\n  const result = hash(fromString(message, UTF8));\n  return toString(result, BASE16);\n}\n\nexport function encodeTypeByte(type: number): Uint8Array {\n  return fromString(`${type}`, BASE10);\n}\n\nexport function decodeTypeByte(byte: Uint8Array): number {\n  return Number(toString(byte, BASE10));\n}\n\nexport function encrypt(params: CryptoTypes.EncryptParams): string {\n  const type = encodeTypeByte(typeof params.type !== \"undefined\" ? params.type : TYPE_0);\n  if (decodeTypeByte(type) === TYPE_1 && typeof params.senderPublicKey === \"undefined\") {\n    throw new Error(\"Missing sender public key for type 1 envelope\");\n  }\n  const senderPublicKey =\n    typeof params.senderPublicKey !== \"undefined\"\n      ? fromString(params.senderPublicKey, BASE16)\n      : undefined;\n\n  const iv =\n    typeof params.iv !== \"undefined\" ? fromString(params.iv, BASE16) : randomBytes(IV_LENGTH);\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const sealed = box.seal(iv, fromString(params.message, UTF8));\n  return serialize({ type, sealed, iv, senderPublicKey });\n}\n\nexport function decrypt(params: CryptoTypes.DecryptParams): string {\n  const box = new ChaCha20Poly1305(fromString(params.symKey, BASE16));\n  const { sealed, iv } = deserialize(params.encoded);\n  const message = box.open(iv, sealed);\n  if (message === null) throw new Error(\"Failed to decrypt\");\n  return toString(message, UTF8);\n}\n\nexport function serialize(params: CryptoTypes.EncodingParams): string {\n  if (decodeTypeByte(params.type) === TYPE_1) {\n    if (typeof params.senderPublicKey === \"undefined\") {\n      throw new Error(\"Missing sender public key for type 1 envelope\");\n    }\n    return toString(\n      concat([params.type, params.senderPublicKey, params.iv, params.sealed]),\n      BASE64,\n    );\n  }\n  // default to type 0 envelope\n  return toString(concat([params.type, params.iv, params.sealed]), BASE64);\n}\n\nexport function deserialize(encoded: string): CryptoTypes.EncodingParams {\n  const bytes = fromString(encoded, BASE64);\n  const type = bytes.slice(ZERO_INDEX, TYPE_LENGTH);\n  const slice1 = TYPE_LENGTH;\n  if (decodeTypeByte(type) === TYPE_1) {\n    const slice2 = slice1 + KEY_LENGTH;\n    const slice3 = slice2 + IV_LENGTH;\n    const senderPublicKey = bytes.slice(slice1, slice2);\n    const iv = bytes.slice(slice2, slice3);\n    const sealed = bytes.slice(slice3);\n    return { type, sealed, iv, senderPublicKey };\n  }\n  // default to type 0 envelope\n  const slice2 = slice1 + IV_LENGTH;\n  const iv = bytes.slice(slice1, slice2);\n  const sealed = bytes.slice(slice2);\n  return { type, sealed, iv };\n}\n\nexport function validateDecoding(\n  encoded: string,\n  opts?: CryptoTypes.DecodeOptions,\n): CryptoTypes.EncodingValidation {\n  const deserialized = deserialize(encoded);\n  return validateEncoding({\n    type: decodeTypeByte(deserialized.type),\n    senderPublicKey:\n      typeof deserialized.senderPublicKey !== \"undefined\"\n        ? toString(deserialized.senderPublicKey, BASE16)\n        : undefined,\n    receiverPublicKey: opts?.receiverPublicKey,\n  });\n}\n\nexport function validateEncoding(opts?: CryptoTypes.EncodeOptions): CryptoTypes.EncodingValidation {\n  const type = opts?.type || TYPE_0;\n  if (type === TYPE_1) {\n    if (typeof opts?.senderPublicKey === \"undefined\") {\n      throw new Error(\"missing sender public key\");\n    }\n    if (typeof opts?.receiverPublicKey === \"undefined\") {\n      throw new Error(\"missing receiver public key\");\n    }\n  }\n  return {\n    type,\n    senderPublicKey: opts?.senderPublicKey,\n    receiverPublicKey: opts?.receiverPublicKey,\n  };\n}\n\nexport function isTypeOneEnvelope(\n  result: CryptoTypes.EncodingValidation,\n): result is CryptoTypes.TypeOneParams {\n  return (\n    result.type === TYPE_1 &&\n    typeof result.senderPublicKey === \"string\" &&\n    typeof result.receiverPublicKey === \"string\"\n  );\n}\n","import { detect } from \"detect-browser\";\nimport { FIVE_MINUTES, fromMiliseconds, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  SignClientTypes,\n  RelayerClientMetadata,\n  EngineTypes,\n  RelayerTypes,\n} from \"@walletconnect/types\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-utils\";\nimport * as qs from \"query-string\";\n\n// -- constants -----------------------------------------//\n\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\n\nexport const ENV_MAP = {\n  reactNative: \"react-native\",\n  node: \"node\",\n  browser: \"browser\",\n  unknown: \"unknown\",\n};\n\nexport const EMPTY_SPACE = \" \";\n\nexport const COLON = \":\";\n\nexport const SLASH = \"/\";\n\nexport const DEFAULT_DEPTH = 2;\n\nexport const ONE_THOUSAND = 1000;\n\nexport const SDK_TYPE = \"js\";\n\n// -- env -----------------------------------------------//\n\nexport function isNode(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    typeof process.versions !== \"undefined\" &&\n    typeof process.versions.node !== \"undefined\"\n  );\n}\n\nexport function isReactNative(): boolean {\n  return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\n\nexport function isBrowser(): boolean {\n  return !isNode() && !!getNavigator();\n}\n\nexport function getEnvironment(): string {\n  if (isReactNative()) return ENV_MAP.reactNative;\n  if (isNode()) return ENV_MAP.node;\n  if (isBrowser()) return ENV_MAP.browser;\n  return ENV_MAP.unknown;\n}\n\n// -- query -----------------------------------------------//\n\nexport function appendToQueryString(queryString: string, newQueryParams: any): string {\n  let queryParams = qs.parse(queryString);\n\n  queryParams = { ...queryParams, ...newQueryParams };\n\n  queryString = qs.stringify(queryParams);\n\n  return queryString;\n}\n\n// -- metadata ----------------------------------------------//\n\nexport function getAppMetadata(): SignClientTypes.Metadata {\n  return (\n    getWindowMetadata() || {\n      name: \"\",\n      description: \"\",\n      url: \"\",\n      icons: [\"\"],\n    }\n  );\n}\n\nexport function getRelayClientMetadata(protocol: string, version: number): RelayerClientMetadata {\n  const env = getEnvironment();\n\n  const metadata: RelayerClientMetadata = { protocol, version, env };\n  if (env === \"browser\") {\n    metadata.host = getLocation()?.host || \"unknown\";\n  }\n  return metadata;\n}\n\n// -- rpcUrl ----------------------------------------------//\n\nexport function getJavascriptOS() {\n  const info = detect();\n  if (info === null) return \"unknown\";\n  const os = info.os ? info.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n  if (info.type === \"browser\") {\n    return [os, info.name, info.version].join(\"-\");\n  }\n  return [os, info.version].join(\"-\");\n}\n\nexport function getJavascriptID() {\n  const env = getEnvironment();\n  return env === ENV_MAP.browser ? [env, getLocation()?.host || \"unknown\"].join(\":\") : env;\n}\n\nexport function formatUA(protocol: string, version: number, sdkVersion: string) {\n  const os = getJavascriptOS();\n  const id = getJavascriptID();\n  return [[protocol, version].join(\"-\"), [SDK_TYPE, sdkVersion].join(\"-\"), os, id].join(\"/\");\n}\nconsole;\n\nexport function formatRelayRpcUrl({\n  protocol,\n  version,\n  relayUrl,\n  sdkVersion,\n  auth,\n  projectId,\n}: RelayerTypes.RpcUrlParams) {\n  const splitUrl = relayUrl.split(\"?\");\n  const ua = formatUA(protocol, version, sdkVersion);\n  const params = { auth, ua, projectId };\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\n\nexport function getHttpUrl(url: string) {\n  // regex from https://stackoverflow.com/questions/3883871/regexp-to-grab-protocol-from-url\n  const matches = url.match(/^[^:]+(?=:\\/\\/)/gi) || [];\n  let protocol = matches[0];\n  const domain = typeof protocol !== \"undefined\" ? url.split(\"://\")[1] : url;\n  protocol = protocol === \"wss\" ? \"https\" : \"http\";\n  return [protocol, domain].join(\"://\");\n}\n\n// -- assert ------------------------------------------------- //\n\nexport function assertType(obj: any, key: string, type: string) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\n\n// -- context ------------------------------------------------- //\n\nexport function parseContextNames(context: string, depth = DEFAULT_DEPTH) {\n  return getLastItems(context.split(SLASH), depth);\n}\n\nexport function formatMessageContext(context: string): string {\n  return parseContextNames(context).join(EMPTY_SPACE);\n}\n\n// -- array ------------------------------------------------- //\n\nexport function hasOverlap(a: any[], b: any[]): boolean {\n  const matches = a.filter((x) => b.includes(x));\n  return matches.length === a.length;\n}\n\nexport function getLastItems(arr: any[], depth = DEFAULT_DEPTH): any[] {\n  return arr.slice(Math.max(arr.length - depth, 0));\n}\n\n// -- map ------------------------------------------------- //\n\nexport function mapToObj<T = any>(map: Map<string, T>): Record<string, T> {\n  return Object.fromEntries(map.entries());\n}\n\nexport function objToMap<T = any>(obj: Record<string, T>): Map<string, T> {\n  return new Map<string, T>(Object.entries<T>(obj));\n}\n\nexport function mapEntries<A = any, B = any>(\n  obj: Record<string, A>,\n  cb: (x: A) => B,\n): Record<string, B> {\n  const res = {};\n  Object.keys(obj).forEach((key) => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\n\n// -- enum ------------------------------------------------- //\n\n// source: https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275\nexport const enumify = <T extends { [index: string]: U }, U extends string>(x: T): T => x;\n\n// -- string ------------------------------------------------- //\n\nexport function capitalizeWord(word: string) {\n  return word.trim().replace(/^\\w/, (c) => c.toUpperCase());\n}\n\nexport function capitalize(str: string) {\n  return str\n    .split(EMPTY_SPACE)\n    .map((w) => capitalizeWord(w))\n    .join(EMPTY_SPACE);\n}\n\n// -- promises --------------------------------------------- //\nexport function createDelayedPromise<T>(expiry?: number | undefined) {\n  const timeout = toMiliseconds(expiry || FIVE_MINUTES);\n  let cacheResolve: undefined | ((value: T | PromiseLike<T>) => void);\n  let cacheReject: undefined | ((value?: ErrorResponse) => void);\n  let cacheTimeout: undefined | NodeJS.Timeout;\n\n  const done = () =>\n    new Promise<T>((promiseResolve, promiseReject) => {\n      cacheTimeout = setTimeout(promiseReject, timeout);\n      cacheResolve = promiseResolve;\n      cacheReject = promiseReject;\n    });\n  const resolve = (value?: T) => {\n    if (cacheTimeout && cacheResolve) {\n      clearTimeout(cacheTimeout);\n      cacheResolve(value as T);\n    }\n  };\n  const reject = (value?: ErrorResponse) => {\n    if (cacheTimeout && cacheReject) {\n      clearTimeout(cacheTimeout);\n      cacheReject(value);\n    }\n  };\n\n  return {\n    resolve,\n    reject,\n    done,\n  };\n}\n\nexport function createExpiringPromise<T>(promise: Promise<T>, expiry: number) {\n  return new Promise(async (resolve, reject) => {\n    const timeout = setTimeout(() => reject(), expiry);\n    const res = await promise;\n    clearTimeout(timeout);\n    resolve(res);\n  });\n}\n\n// -- expirer --------------------------------------------- //\n\nexport function formatExpirerTarget(type: \"topic\" | \"id\", value: string | number): string {\n  if (typeof value === \"string\" && value.startsWith(`${type}:`)) return value;\n  if (type.toLowerCase() === \"topic\") {\n    if (typeof value !== \"string\")\n      throw new Error(`Value must be \"string\" for expirer target type: topic`);\n    return `topic:${value}`;\n  } else if (type.toLowerCase() === \"id\") {\n    if (typeof value !== \"number\")\n      throw new Error(`Value must be \"number\" for expirer target type: id`);\n    return `id:${value}`;\n  }\n  throw new Error(`Unknown expirer target type: ${type}`);\n}\n\nexport function formatTopicTarget(topic: string): string {\n  return formatExpirerTarget(\"topic\", topic);\n}\n\nexport function formatIdTarget(id: number): string {\n  return formatExpirerTarget(\"id\", id);\n}\n\nexport function parseExpirerTarget(target: string) {\n  const [type, value] = target.split(\":\");\n  const parsed: { id?: number; topic?: string } = { id: undefined, topic: undefined };\n  if (type === \"topic\" && typeof value === \"string\") {\n    parsed.topic = value;\n  } else if (type === \"id\" && Number.isInteger(Number(value))) {\n    parsed.id = Number(value);\n  } else {\n    throw new Error(`Invalid target, expected id:number or topic:string, got ${type}:${value}`);\n  }\n\n  return parsed;\n}\n\nexport function calcExpiry(ttl: number, now?: number): number {\n  return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}\n\nexport function isExpired(expiry: number) {\n  return Date.now() >= toMiliseconds(expiry);\n}\n\n// -- events ---------------------------------------------- //\n\nexport function engineEvent(event: EngineTypes.Event, id?: number | string | undefined) {\n  return `${event}${id ? `:${id}` : \"\"}`;\n}\n","import { RELAY_JSONRPC } from \"@walletconnect/relay-api\";\nimport { RelayerTypes } from \"@walletconnect/types\";\n\nexport const RELAYER_DEFAULT_PROTOCOL = \"irn\";\n\nexport function getRelayProtocolName(\n  opts?: RelayerTypes.RequestOptions,\n): RelayerTypes.ProtocolOptions {\n  return opts?.relay || { protocol: RELAYER_DEFAULT_PROTOCOL };\n}\n\nexport function getRelayProtocolApi(protocol: string) {\n  const jsonrpc = RELAY_JSONRPC[protocol];\n  if (typeof jsonrpc === \"undefined\") {\n    throw new Error(`Relay Protocol not supported: ${protocol}`);\n  }\n  return jsonrpc;\n}\n","import * as qs from \"query-string\";\nimport { EngineTypes, RelayerTypes } from \"@walletconnect/types\";\n\n// -- uri -------------------------------------------------- //\n\nexport function parseRelayParams(params: any, delimiter = \"-\"): RelayerTypes.ProtocolOptions {\n  const relay: any = {};\n  const prefix = \"relay\" + delimiter;\n  Object.keys(params).forEach((key) => {\n    if (key.startsWith(prefix)) {\n      const name = key.replace(prefix, \"\");\n      const value = params[key];\n      relay[name] = value;\n    }\n  });\n  return relay;\n}\n\nexport function parseUri(str: string): EngineTypes.UriParameters {\n  const pathStart: number = str.indexOf(\":\");\n  const pathEnd: number | undefined = str.indexOf(\"?\") !== -1 ? str.indexOf(\"?\") : undefined;\n  const protocol: string = str.substring(0, pathStart);\n  const path: string = str.substring(pathStart + 1, pathEnd);\n  const requiredValues = path.split(\"@\");\n  const queryString: string = typeof pathEnd !== \"undefined\" ? str.substring(pathEnd) : \"\";\n  const queryParams = qs.parse(queryString);\n  const result = {\n    protocol,\n    topic: requiredValues[0],\n    version: parseInt(requiredValues[1], 10),\n    symKey: queryParams.symKey as string,\n    relay: parseRelayParams(queryParams),\n  };\n  return result;\n}\n\nexport function formatRelayParams(relay: RelayerTypes.ProtocolOptions, delimiter = \"-\") {\n  const prefix = \"relay\";\n  const params: any = {};\n  Object.keys(relay).forEach((key) => {\n    const k = prefix + delimiter + key;\n    if (relay[key]) {\n      params[k] = relay[key];\n    }\n  });\n  return params;\n}\n\nexport function formatUri(params: EngineTypes.UriParameters): string {\n  return (\n    `${params.protocol}:${params.topic}@${params.version}?` +\n    qs.stringify({\n      symKey: params.symKey,\n      ...formatRelayParams(params.relay),\n    })\n  );\n}\n","import { ProposalTypes, SessionTypes } from \"@walletconnect/types\";\nimport { isValidNamespaces } from \"./validators\";\n\nexport function getAccountsChains(accounts: SessionTypes.Namespace[\"accounts\"]) {\n  const chains: string[] = [];\n  accounts.forEach((account) => {\n    const [chain, chainId] = account.split(\":\");\n    chains.push(`${chain}:${chainId}`);\n  });\n\n  return chains;\n}\n\nexport function getNamespacesChains(namespaces: SessionTypes.Namespaces) {\n  const chains: string[] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    chains.push(...getAccountsChains(namespace.accounts));\n  });\n\n  return chains;\n}\n\nexport function getNamespacesMethodsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const methods: SessionTypes.Namespace[\"methods\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) methods.push(...namespace.methods);\n  });\n\n  return methods;\n}\n\nexport function getNamespacesEventsForChainId(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n) {\n  const events: SessionTypes.Namespace[\"events\"] = [];\n  Object.values(namespaces).forEach((namespace) => {\n    const chains = getAccountsChains(namespace.accounts);\n    if (chains.includes(chainId)) events.push(...namespace.events);\n  });\n\n  return events;\n}\n\nexport function getRequiredNamespacesFromNamespaces(\n  namespaces: SessionTypes.Namespaces,\n  caller: string,\n): ProposalTypes.RequiredNamespaces {\n  const validNamespacesError = isValidNamespaces(namespaces, caller);\n  if (validNamespacesError) throw new Error(validNamespacesError.message);\n\n  const required = {};\n  for (const [namespace, values] of Object.entries(namespaces)) {\n    required[namespace] = {\n      methods: values.methods,\n      events: values.events,\n      chains: values.accounts.map((account) => `${account.split(\":\")[0]}:${account.split(\":\")[1]}`),\n    };\n  }\n  return required;\n}\n","/**\n * Types\n */\ntype SdkErrorKey = keyof typeof SDK_ERRORS;\ntype InternalErrorKey = keyof typeof INTERNAL_ERRORS;\n\n/**\n * Constants\n */\nconst SDK_ERRORS = {\n  /* ----- INVALID (1xxx) ----- */\n  INVALID_METHOD: {\n    message: \"Invalid method.\",\n    code: 1001,\n  },\n  INVALID_EVENT: {\n    message: \"Invalid event.\",\n    code: 1002,\n  },\n  INVALID_UPDATE_REQUEST: {\n    message: \"Invalid update request.\",\n    code: 1003,\n  },\n  INVALID_EXTEND_REQUEST: {\n    message: \"Invalid extend request.\",\n    code: 1004,\n  },\n  INVALID_SESSION_SETTLE_REQUEST: {\n    message: \"Invalid session settle request.\",\n    code: 1005,\n  },\n  /* ----- UNAUTHORIZED (3xxx) ----- */\n  UNAUTHORIZED_METHOD: {\n    message: \"Unauthorized method.\",\n    code: 3001,\n  },\n  UNAUTHORIZED_EVENT: {\n    message: \"Unauthorized event.\",\n    code: 3002,\n  },\n  UNAUTHORIZED_UPDATE_REQUEST: {\n    message: \"Unauthorized update request.\",\n    code: 3003,\n  },\n  UNAUTHORIZED_EXTEND_REQUEST: {\n    message: \"Unauthorized extend request.\",\n    code: 3004,\n  },\n  /* ----- REJECTED (5xxx) ----- */\n  USER_REJECTED: {\n    message: \"User rejected.\",\n    code: 5000,\n  },\n  USER_REJECTED_CHAINS: {\n    message: \"User rejected chains.\",\n    code: 5001,\n  },\n  USER_REJECTED_METHODS: {\n    message: \"User rejected methods.\",\n    code: 5002,\n  },\n  USER_REJECTED_EVENTS: {\n    message: \"User rejected events.\",\n    code: 5003,\n  },\n  UNSUPPORTED_CHAINS: {\n    message: \"Unsupported chains.\",\n    code: 5100,\n  },\n  UNSUPPORTED_METHODS: {\n    message: \"Unsupported methods.\",\n    code: 5101,\n  },\n  UNSUPPORTED_EVENTS: {\n    message: \"Unsupported events.\",\n    code: 5102,\n  },\n  UNSUPPORTED_ACCOUNTS: {\n    message: \"Unsupported accounts.\",\n    code: 5103,\n  },\n  UNSUPPORTED_NAMESPACE_KEY: {\n    message: \"Unsupported namespace key.\",\n    code: 5104,\n  },\n  /* ----- REASON (6xxx) ----- */\n  USER_DISCONNECTED: {\n    message: \"User disconnected.\",\n    code: 6000,\n  },\n  /* ----- FAILURE (7xxx) ----- */\n  SESSION_SETTLEMENT_FAILED: {\n    message: \"Session settlement failed.\",\n    code: 7000,\n  },\n  /* ----- PAIRING (10xxx) ----- */\n  WC_METHOD_UNSUPPORTED: {\n    message: \"Unsupported wc_ method.\",\n    code: 10001,\n  },\n};\n\nconst INTERNAL_ERRORS = {\n  NOT_INITIALIZED: {\n    message: \"Not initialized.\",\n    code: 1,\n  },\n  NO_MATCHING_KEY: {\n    message: \"No matching key.\",\n    code: 2,\n  },\n  RESTORE_WILL_OVERRIDE: {\n    message: \"Restore will override.\",\n    code: 3,\n  },\n  RESUBSCRIBED: {\n    message: \"Resubscribed.\",\n    code: 4,\n  },\n  MISSING_OR_INVALID: {\n    message: \"Missing or invalid.\",\n    code: 5,\n  },\n  EXPIRED: {\n    message: \"Expired.\",\n    code: 6,\n  },\n  UNKNOWN_TYPE: {\n    message: \"Unknown type.\",\n    code: 7,\n  },\n  MISMATCHED_TOPIC: {\n    message: \"Mismatched topic.\",\n    code: 8,\n  },\n  NON_CONFORMING_NAMESPACES: {\n    message: \"Non conforming namespaces.\",\n    code: 9,\n  },\n};\n\n/**\n * Utilities\n */\nexport function getInternalError(key: InternalErrorKey, context?: string | number) {\n  const { message, code } = INTERNAL_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n\nexport function getSdkError(key: SdkErrorKey, context?: string | number) {\n  const { message, code } = SDK_ERRORS[key];\n  return {\n    message: context ? `${message} ${context}` : message,\n    code,\n  };\n}\n","import { SessionTypes, ProposalTypes, RelayerTypes, EngineTypes } from \"@walletconnect/types\";\nimport { ErrorResponse } from \"@walletconnect/jsonrpc-types\";\nimport {\n  getNamespacesChains,\n  getNamespacesMethodsForChainId,\n  getNamespacesEventsForChainId,\n  getAccountsChains,\n} from \"./namespaces\";\nimport { getSdkError, getInternalError } from \"./errors\";\nimport { hasOverlap } from \"./misc\";\nimport { getChainsFromNamespace } from \"./caip\";\n\nexport type ErrorObject = { message: string; code: number } | null;\n\n// -- types validation ----------------------------------------------------- //\n\nexport function isValidArray(arr: any, itemCondition?: (item: any) => boolean) {\n  if (Array.isArray(arr)) {\n    if (typeof itemCondition !== \"undefined\" && arr.length) {\n      return arr.every(itemCondition);\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isValidObject(obj: any) {\n  return Object.getPrototypeOf(obj) === Object.prototype && Object.keys(obj).length;\n}\n\nexport function isUndefined(input: any): input is undefined {\n  return typeof input === \"undefined\";\n}\n\nexport function isValidString(input: any, optional: boolean): input is string {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"string\" && Boolean(input.trim().length);\n}\n\nexport function isValidNumber(input: any, optional: boolean) {\n  if (optional && isUndefined(input)) return true;\n\n  return typeof input === \"number\" && !isNaN(input);\n}\n\n// -- protocol validation -------------------------------------------------- //\n\nexport function isSessionCompatible(session: SessionTypes.Struct, params: EngineTypes.FindParams) {\n  const { requiredNamespaces } = params;\n  const sessionKeys = Object.keys(session.namespaces);\n  const paramsKeys = Object.keys(requiredNamespaces);\n  let compatible = true;\n\n  if (!hasOverlap(paramsKeys, sessionKeys)) return false;\n\n  sessionKeys.forEach((key) => {\n    const { accounts, methods, events } = session.namespaces[key];\n    const chains = getAccountsChains(accounts);\n    const requiredNamespace = requiredNamespaces[key];\n    if (\n      !hasOverlap(getChainsFromNamespace(key, requiredNamespace), chains) ||\n      !hasOverlap(requiredNamespace.methods, methods) ||\n      !hasOverlap(requiredNamespace.events, events)\n    ) {\n      compatible = false;\n    }\n  });\n\n  return compatible;\n}\n\nexport function isValidChainId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    return split.length === 2;\n  }\n  return false;\n}\n\nexport function isValidAccountId(value: any) {\n  if (isValidString(value, false) && value.includes(\":\")) {\n    const split = value.split(\":\");\n    if (split.length === 3) {\n      const chainId = split[0] + \":\" + split[1];\n      return !!split[2] && isValidChainId(chainId);\n    }\n  }\n  return false;\n}\n\nexport function isValidUrl(value: any) {\n  if (isValidString(value, false)) {\n    try {\n      const url = new URL(value);\n      return typeof url !== \"undefined\";\n    } catch (e) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function isProposalStruct(input: any): input is ProposalTypes.Struct {\n  return input?.proposer?.publicKey;\n}\n\nexport function isSessionStruct(input: any): input is SessionTypes.Struct {\n  return input?.topic;\n}\n\nexport function isValidController(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (!isValidString(input?.publicKey, false)) {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method} controller public key should be a string`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceMethodsOrEvents(input: any): input is string {\n  let valid = true;\n  if (isValidArray(input)) {\n    if (input.length) {\n      valid = input.every((item: any) => isValidString(item, false));\n    }\n  } else {\n    valid = false;\n  }\n\n  return valid;\n}\n\nexport function isValidChains(key: string, chains: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(chains)) {\n    chains.forEach((chain: any) => {\n      if (error) return;\n      if (!isValidChainId(chain) || !chain.includes(key)) {\n        error = getSdkError(\n          \"UNSUPPORTED_CHAINS\",\n          `${context}, chain ${chain} should be a string and conform to \"namespace:chainId\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_CHAINS\",\n      `${context}, chains ${chains} should be an array of strings conforming to \"namespace:chainId\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceChains(namespaces: any, method: string) {\n  let error: ErrorObject = null;\n  Object.entries(namespaces).forEach(([key, namespace]: [string, any]) => {\n    if (error) return;\n    const validChainsError = isValidChains(\n      key,\n      getChainsFromNamespace(key, namespace),\n      `${method} requiredNamespace`,\n    );\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidAccounts(accounts: any, context: string) {\n  let error: ErrorObject = null;\n  if (isValidArray(accounts)) {\n    accounts.forEach((account: any) => {\n      if (error) return;\n      if (!isValidAccountId(account)) {\n        error = getSdkError(\n          \"UNSUPPORTED_ACCOUNTS\",\n          `${context}, account ${account} should be a string and conform to \"namespace:chainId:address\" format`,\n        );\n      }\n    });\n  } else {\n    error = getSdkError(\n      \"UNSUPPORTED_ACCOUNTS\",\n      `${context}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceAccounts(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validAccountsError = isValidAccounts(namespace?.accounts, `${method} namespace`);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidActions(namespace: any, context: string) {\n  let error: ErrorObject = null;\n  if (!isValidNamespaceMethodsOrEvents(namespace?.methods)) {\n    error = getSdkError(\n      \"UNSUPPORTED_METHODS\",\n      `${context}, methods should be an array of strings or empty array for no methods`,\n    );\n  } else if (!isValidNamespaceMethodsOrEvents(namespace?.events)) {\n    error = getSdkError(\n      \"UNSUPPORTED_EVENTS\",\n      `${context}, events should be an array of strings or empty array for no events`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaceActions(input: any, method: string) {\n  let error: ErrorObject = null;\n  Object.values(input).forEach((namespace: any) => {\n    if (error) return;\n    const validActionsError = isValidActions(namespace, `${method}, namespace`);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n  });\n\n  return error;\n}\n\nexport function isValidRequiredNamespaces(input: any, method: string, type: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validChainsError = isValidNamespaceChains(input, method);\n    if (validChainsError) {\n      error = validChainsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, ${type} should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidNamespaces(input: any, method: string) {\n  let error: ErrorObject = null;\n  if (input && isValidObject(input)) {\n    const validActionsError = isValidNamespaceActions(input, method);\n    if (validActionsError) {\n      error = validActionsError;\n    }\n    const validAccountsError = isValidNamespaceAccounts(input, method);\n    if (validAccountsError) {\n      error = validAccountsError;\n    }\n  } else {\n    error = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `${method}, namespaces should be an object with data`,\n    );\n  }\n\n  return error;\n}\n\nexport function isValidRelay(input: any): input is RelayerTypes.ProtocolOptions {\n  return isValidString(input.protocol, true);\n}\n\nexport function isValidRelays(\n  input: any,\n  optional: boolean,\n): input is RelayerTypes.ProtocolOptions[] {\n  let valid = false;\n\n  if (optional && !input) valid = true;\n  else if (input && isValidArray(input) && input.length) {\n    input.forEach((relay: RelayerTypes.ProtocolOptions) => {\n      valid = isValidRelay(relay);\n    });\n  }\n\n  return valid;\n}\n\nexport function isValidId(input: any) {\n  return typeof input === \"number\";\n}\n\nexport function isValidParams(input: any) {\n  return typeof input !== \"undefined\" && typeof input !== null;\n}\n\nexport function isValidErrorReason(input: any): input is ErrorResponse {\n  if (!input) return false;\n  if (typeof input !== \"object\") return false;\n  if (!input.code || !isValidNumber(input.code, false)) return false;\n  if (!input.message || !isValidString(input.message, false)) return false;\n\n  return true;\n}\n\nexport function isValidRequest(request: any) {\n  if (isUndefined(request)) return false;\n  if (!isValidString(request.method, false)) return false;\n  return true;\n}\n\nexport function isValidResponse(response: any) {\n  if (isUndefined(response)) return false;\n  if (isUndefined(response.result) && isUndefined(response.error)) return false;\n  if (!isValidNumber(response.id, false)) return false;\n  if (!isValidString(response.jsonrpc, false)) return false;\n  return true;\n}\n\nexport function isValidEvent(event: any) {\n  if (isUndefined(event)) return false;\n  if (!isValidString(event.name, false)) return false;\n  return true;\n}\n\nexport function isValidNamespacesChainId(namespaces: SessionTypes.Namespaces, chainId: string) {\n  if (!isValidChainId(chainId)) return false;\n  const chains = getNamespacesChains(namespaces);\n  if (!chains.includes(chainId)) return false;\n\n  return true;\n}\n\nexport function isValidNamespacesRequest(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  method: string,\n) {\n  if (!isValidString(method, false)) return false;\n  const methods = getNamespacesMethodsForChainId(namespaces, chainId);\n  return methods.includes(method);\n}\n\nexport function isValidNamespacesEvent(\n  namespaces: SessionTypes.Namespaces,\n  chainId: string,\n  eventName: string,\n) {\n  if (!isValidString(eventName, false)) return false;\n  const events = getNamespacesEventsForChainId(namespaces, chainId);\n  return events.includes(eventName);\n}\n\nexport function isConformingNamespaces(\n  requiredNamespaces: ProposalTypes.RequiredNamespaces,\n  namespaces: SessionTypes.Namespaces,\n  context: string,\n  type: string,\n) {\n  let error: ErrorObject = null;\n  const requiredNamespaceKeys = Object.keys(requiredNamespaces);\n  const namespaceKeys = Object.keys(namespaces);\n\n  if (!hasOverlap(requiredNamespaceKeys, namespaceKeys)) {\n    error = getInternalError(\n      \"NON_CONFORMING_NAMESPACES\",\n      `${context} namespaces keys don't satisfy ${type}`,\n    );\n  } else {\n    requiredNamespaceKeys.forEach((key) => {\n      if (error) return;\n\n      const namespaceChains = getAccountsChains(namespaces[key].accounts);\n\n      if (!hasOverlap(getChainsFromNamespace(key, requiredNamespaces[key]), namespaceChains)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces accounts don't satisfy namespace chains for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].methods, namespaces[key].methods)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces methods don't satisfy namespace methods for ${key}`,\n        );\n      } else if (!hasOverlap(requiredNamespaces[key].events, namespaces[key].events)) {\n        error = getInternalError(\n          \"NON_CONFORMING_NAMESPACES\",\n          `${context} namespaces events don't satisfy namespace events for ${key}`,\n        );\n      }\n    });\n  }\n\n  return error;\n}\n\nexport function isValidRequestExpiry(expiry: number, boundaries: { min: number; max: number }) {\n  return isValidNumber(expiry, false) && expiry <= boundaries.max && expiry >= boundaries.min;\n}\n"],"names":["CAIP_DELIMITER","chain","namespace","reference","params","account","address","array","parser","unique","str","value","accounts","namespaces","keys","key","ns","chains","requiredNamespaces","namespaceProps","iss","segments","cacao","header","walletAddress","statement","uri","version","chainId","nonce","issuedAt","resources","resource","val","ZERO_INDEX","TYPE_LENGTH","IV_LENGTH","KEY_LENGTH","keyPair","x25519","toString","random","randomBytes","privateKeyA","publicKeyB","sharedKey","fromString","symKey","HKDF","SHA256","result","hash","message","type","byte","senderPublicKey","iv","sealed","ChaCha20Poly1305","box","concat","encoded","bytes","slice1","slice2","slice3","opts","deserialized","getDocument","getNavigator","queryString","newQueryParams","queryParams","qs","__spreadValues","getWindowMetadata","protocol","_a","env","metadata","getLocation","info","detect","os","sdkVersion","id","relayUrl","auth","projectId","splitUrl","ua","url","domain","obj","context","depth","a","b","x","arr","map","cb","res","word","c","w","expiry","timeout","toMiliseconds","FIVE_MINUTES","cacheResolve","cacheReject","cacheTimeout","promiseResolve","promiseReject","promise","resolve","reject","topic","target","parsed","ttl","now","fromMiliseconds","event","jsonrpc","RELAY_JSONRPC","delimiter","relay","prefix","name","pathStart","pathEnd","requiredValues","k","methods","events","caller","validNamespacesError","isValidNamespaces","required","values","SDK_ERRORS","INTERNAL_ERRORS","code","itemCondition","input","optional","session","sessionKeys","paramsKeys","compatible","hasOverlap","getAccountsChains","requiredNamespace","getChainsFromNamespace","split","e","method","error","getInternalError","valid","item","getSdkError","validChainsError","validAccountsError","validActionsError","request","response","getNamespacesChains","getNamespacesMethodsForChainId","eventName","getNamespacesEventsForChainId","requiredNamespaceKeys","namespaceKeys","namespaceChains","boundaries"],"mappings":"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"}